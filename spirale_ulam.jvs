
import javax.swing. *;
import java.awt.event. *;
import java.awt. *;
import org.javascool.widgets.IconOutput;
import java.awt.image.BufferedImage;
import org.javascool.proglets.codagePixels.ImageUtils;

// Bouton pour sauver l'image
	JButton sauver = new JButton("Sauver l'image");
// Menu pour le choix du type de suite que l'on veut représenter, une propriété y est automatiquement associée
	String[] typeSuite = { "Entiers naturels", "Suite M", "Suite F"};
	JComboBox typeSuiteListe = new JComboBox(typeSuite);
// Labels et zone de texte pour le choix des coordonnees du centre de l'image	
	JLabel labelCentrex = new JLabel("Coordonnées du centre : x = ");
	JLabel labelCentrey = new JLabel(" y = ");
	JTextField jtfCentrex = new JTextField("0");
	JTextField jtfCentrey = new JTextField("0");
// L'image en elle même !		
	Image image = new Image();
// Affiche la fréquence des nombres vérifiant la propriété choisie avec la suite
	JLabel labelFrequence = new JLabel("Fréquence");
// Choix des coefficients a, b et c pour afficher les nombres de la forme an^2+bn+c
     JLabel labelNombreForme = new JLabel("Nombres de la forme an^2+bn+c");
	JTextField jtfNombrea = new JTextField("1");
	JTextField jtfNombreb = new JTextField("1");
	JTextField jtfNombrec = new JTextField("41");
     JLabel labelNombrea = new JLabel("a = ");
     JLabel labelNombreb = new JLabel("b = ");
     JLabel labelNombrec = new JLabel("c = ");
// Choix de l'intervalle pour n et les nombres précédents
     JLabel labelVariationNombre1 = new JLabel("pour n allant de ");
     JLabel labelVariationNombre2 = new JLabel("à");
	JTextField jtfNombreDebutIntervalle = new JTextField("0");
	JTextField jtfNombreFinIntervalle = new JTextField("1000");
// Pour réinitialiser l'image
	JButton reinitialiser = new JButton("Réinitialiser");
// Panneau qui contient les éléments précédents
	JLayeredPane panneau = getPane();
// Choix de la police de caractère pour les zones de texte modifiables
	Font police = new Font("Arial", Font.BOLD, 14);
// Gestion des zones de texte modifiables
	GestionClic gc = new GestionClic();

	
	/*JLabel labelDimension = new JLabel("Dimension : ");
	JTextField jtfDimension = new JTextField("256");*/
//	MouseEventImage gmc = new MouseEventImage();
//	JLabel labelpointCoordonneesx = new JLabel("i = 0");
//	JLabel labelpointCoordonneesy = new JLabel("j = 0");
//	JLabel labelpointValeur = new JLabel("Valeur = 0");



public class Spirale extends JFrame{
	public Spirale(){
		int n1 = 700;
		int n2 = 256;
		int largeur = n1;
		int hauteur = 800;
		int largeurImage = n2;
		int hauteurImage = n2;
		setTitle("Spirales de nombres");
		setLocationRelativeTo(null);
		setSize(largeur,hauteur);
		image.setBackground(Color.WHITE);
		panneau.removeAll();
		panneau.setLayout(new BoxLayout(panneau, BoxLayout.PAGE_AXIS));

		sauver.addActionListener(gc);
		//panneau.add(sauver);

		JPanel haut1 = new JPanel();
		haut1.add(sauver);
		//haut1.add(labelDimension);
		/*jtfDimension.setFont(police);
          jtfDimension.setPreferredSize(new Dimension(50, 30));
          jtfDimension.setForeground(Color.BLUE);
          jtfDimension.addActionListener(gc);
		haut1.add(jtfDimension);*/
		//panneau.add(haut1);

		typeSuiteListe.setSelectedIndex(0);
		typeSuiteListe.addActionListener(gc);
		//JPanel haut2 = new JPanel();
		haut1.add(typeSuiteListe);

		haut1.add(labelCentrex);
		jtfCentrex.setFont(police);
          jtfCentrex.setPreferredSize(new Dimension(50, 30));
          jtfCentrex.setForeground(Color.BLUE);
          jtfCentrex.addActionListener(gc);
		haut1.add(jtfCentrex);
		haut1.add(labelCentrey);
		jtfCentrey.setFont(police);
          jtfCentrey.setPreferredSize(new Dimension(50, 30));
          jtfCentrey.setForeground(Color.BLUE);
          jtfCentrey.addActionListener(gc);
		haut1.add(jtfCentrey);

		panneau.add(haut1);


		image.setImage(largeurImage, hauteurImage, true, 1, 1, 1, 0, 10000);
		//image.setCentre(1000,1000);
		image.setCentre(0,0);
		image.fonction.setabc(0, 1, 0);
		image.fonctionPartiel.setabc(1, 1, 41);
		//image.fonction.setabc(1, 1, 41);
		//println(this.getWidth());
		//image.reset(500,500, true);
		//image.creeSpirale( (int) (largeur-500)/2,(int) (hauteur-500)/2);
		image.creeSpirale();
		//image.filtre();
		//image.save();
		//println(image.frequence());
		panneau.add(image);


		//println(image.getWidth());
		//image.set(250, 250, new Color(255, 0, 0));
		// setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JPanel basFrequence = new JPanel();
		labelFrequence.setText("Frequence = " + image.frequence());
		basFrequence.add(labelFrequence);
		panneau.add(basFrequence);

		JPanel bas1Titre = new JPanel();
		bas1Titre.add(labelNombreForme);
		panneau.add(bas1Titre);
		
     	JPanel bas1 = new JPanel();
		bas1.setBackground(Color.WHITE);
		jtfNombrea.setFont(police);
          jtfNombrea.setPreferredSize(new Dimension(50, 30));
          jtfNombrea.setForeground(Color.BLUE);
          jtfNombreb.setFont(police);
          jtfNombreb.setPreferredSize(new Dimension(50, 30));
          jtfNombreb.setForeground(Color.BLUE);
          jtfNombrec.setFont(police);
          jtfNombrec.setPreferredSize(new Dimension(50, 30));
          jtfNombrec.setForeground(Color.BLUE);
		jtfNombreDebutIntervalle.setFont(police);
          jtfNombreDebutIntervalle.setPreferredSize(new Dimension(50, 30));
          jtfNombreDebutIntervalle.setForeground(Color.BLUE);
		jtfNombreFinIntervalle.setFont(police);
          jtfNombreFinIntervalle.setPreferredSize(new Dimension(50, 30));
          jtfNombreFinIntervalle.setForeground(Color.BLUE);

          
          jtfNombrea.addActionListener(gc);
          jtfNombrea.addKeyListener(new ClavierListener()); ///////////////////
		jtfNombreb.addActionListener(gc);
          jtfNombreb.addKeyListener(new ClavierListener()); ///////////////////
		jtfNombrec.addActionListener(gc);
          jtfNombrec.addKeyListener(new ClavierListener()); ///////////////////
		jtfNombreDebutIntervalle.addActionListener(gc);
		jtfNombreFinIntervalle.addActionListener(gc);

          bas1.add(labelNombrea);
          bas1.add(jtfNombrea);
          bas1.add(labelNombreb);
          bas1.add(jtfNombreb);
          bas1.add(labelNombrec);
          bas1.add(jtfNombrec);
          bas1.add(labelVariationNombre1);
          bas1.add(jtfNombreDebutIntervalle);
          bas1.add(labelVariationNombre2);
          bas1.add(jtfNombreFinIntervalle);
	     panneau.add(bas1);

	     //JPanel bas3 = new JPanel();
		//bas3.

	     JPanel bas2 = new JPanel();
	     bas2.setBackground(Color.WHITE);
     	bas2.add(reinitialiser);
	     reinitialiser.addActionListener(gc);
     	panneau.add(bas2);
		
		add(panneau);
		setResizable(false);
		setVisible(true);

		for (int i=1; i<200; i++){
			image.creeSpirale();
			image.fonctionPartiel.setabc(1, 1, i);
			image.filtre();
			image.fonctionPartiel.setabc(1, 1, -i);
			image.filtre();
			if (i < 10){
			image.setNom("image-00" + i + ".png");
					}
			if (10 <= i && i < 100){
			image.setNom("image-0" + i + ".png");
					}					
			if (100 <= i && i < 1000){
			image.setNom("image-" + i + ".png");
					}					
			image.save();
		}

      		/*image.setTypeFonction(2);
      		image.setTypePropriete(2);
		for (int i=0; i<100; i++){
			image.fonction.setabc(0, 1, i);
			image.creeSpirale();
			//image.fonctionPartiel.setabc(1, 1, i);
			//image.filtre();
			//image.fonctionPartiel.setabc(1, 1, -i);
			//image.filtre();
			if (i < 100){
			image.setNom("Chemin\\image-002-00" + i + ".png");
					}
			if (10 <= i && i < 100){
			image.setNom("Chemin\\image-002-0" + i + ".png");
					}					
			if (100 <= i && i < 1000){
			image.setNom("Chemin\\image-002-" + i + ".png");
					}					
			image.save();
		}*/

}
}

	class GestionClic implements ActionListener {
   public void actionPerformed(ActionEvent e) {
      if (e.getSource() == sauver) {
      	image.save(); //save(image.getImage(), image.nom);
      } 
     /*if (e.getSource() == jtfDimension) {
     	//image.setBackground(Color.WHITE);
     	image.setImage(Integer.parseInt(jtfDimension.getText()), Integer.parseInt(jtfDimension.getText()));
     	//image.setCentre(0,0);
     	println("coucou");
     	image.creeSpirale();
      } */
     if (e.getSource() == jtfCentrex) {
     	image.setCentre(Integer.parseInt(jtfCentrex.getText()),Integer.parseInt(jtfCentrey.getText()));
     	image.creeSpirale();
     	labelFrequence.setText("Frequence = " + image.frequence());
      } 
     if (e.getSource() == jtfCentrey) {
     	image.setCentre(Integer.parseInt(jtfCentrex.getText()),Integer.parseInt(jtfCentrey.getText()));
     	image.creeSpirale();
     	labelFrequence.setText("Frequence = " + image.frequence());
      } 
      if (e.getSource() == typeSuiteListe) {
      	JComboBox cb = (JComboBox)e.getSource();
      	String suiteNom = (String)cb.getSelectedItem();
      	//updateLabel(suiteNom);
      	if (suiteNom == "Entiers naturels"){
      		image.setTypeFonction(1);
      		image.setTypePropriete(1);
      		image.creeSpirale();
      		labelFrequence.setText("Frequence = " + image.frequence());
      		//println(image.frequence());
      		//println(suiteNom);
      	}
      	if (suiteNom == "Suite M"){
      		image.setTypeFonction(2);
      		image.setTypePropriete(2);
      		//println(image.typePropriete);
			image.creeSpirale();
			labelFrequence.setText("Frequence = " + image.frequence());
			//image.filtre();
			//println(image.frequence());
			//println(suiteNom);
      	}
      	if (suiteNom == "Suite F"){
      		image.setTypeFonction(3);
      		image.setTypePropriete(1);
      		//println(image.typePropriete);
			image.creeSpirale();
			labelFrequence.setText("Frequence = " + image.frequence());
			//image.filtre();
			//println(image.frequence());
			//println(suiteNom);
      	}
      }

     if (e.getSource() == jtfNombrea) {
     	image.setIntervalle(Integer.parseInt(jtfNombreDebutIntervalle.getText()), Integer.parseInt(jtfNombreFinIntervalle.getText()));
     	image.fonctionPartiel.setabc(Integer.parseInt(jtfNombrea.getText()), Integer.parseInt(jtfNombreb.getText()), Integer.parseInt(jtfNombrec.getText()));
     	image.filtre();
      } 
     if (e.getSource() == jtfNombreb) {
     	image.setIntervalle(Integer.parseInt(jtfNombreDebutIntervalle.getText()), Integer.parseInt(jtfNombreFinIntervalle.getText()));
     	image.fonctionPartiel.setabc(Integer.parseInt(jtfNombrea.getText()), Integer.parseInt(jtfNombreb.getText()), Integer.parseInt(jtfNombrec.getText()));
     	image.filtre();
      } 
     if (e.getSource() == jtfNombrec) {
     	image.setIntervalle(Integer.parseInt(jtfNombreDebutIntervalle.getText()), Integer.parseInt(jtfNombreFinIntervalle.getText()));
     	image.fonctionPartiel.setabc(Integer.parseInt(jtfNombrea.getText()), Integer.parseInt(jtfNombreb.getText()), Integer.parseInt(jtfNombrec.getText()));
     	image.filtre();
      }
     if (e.getSource() == jtfNombreDebutIntervalle) {
     	image.setIntervalle(Integer.parseInt(jtfNombreDebutIntervalle.getText()), Integer.parseInt(jtfNombreFinIntervalle.getText()));
     	image.fonctionPartiel.setabc(Integer.parseInt(jtfNombrea.getText()), Integer.parseInt(jtfNombreb.getText()), Integer.parseInt(jtfNombrec.getText()));
     	image.filtre();
      }
     if (e.getSource() == jtfNombreFinIntervalle) {
     	image.setIntervalle(Integer.parseInt(jtfNombreDebutIntervalle.getText()), Integer.parseInt(jtfNombreFinIntervalle.getText()));
     	image.fonctionPartiel.setabc(Integer.parseInt(jtfNombrea.getText()), Integer.parseInt(jtfNombreb.getText()), Integer.parseInt(jtfNombrec.getText()));
     	image.filtre();
      }
      if (e.getSource() == reinitialiser){
      	image.creeSpirale();
      }
   }
	}

public class MouseEventImage implements MouseListener {
     public void mousePressed(MouseEvent e) {
       //saySomething("Mouse pressed; # of clicks: " + e.getClickCount(), e);
    }

    public void mouseReleased(MouseEvent e) {
       //saySomething("Mouse released; # of clicks: " + e.getClickCount(), e);
    }

    public void mouseEntered(MouseEvent e) {
       //saySomething("Mouse entered", e);
    }

    public void mouseExited(MouseEvent e) {
       //saySomething("Mouse exited", e);
    }

    public void mouseClicked(MouseEvent e) {
	/*	int largeur = image.getWidth();
		int hauteur = image.getHeight();
		int N= 500;
		int zoom = 500/N;
		int coinx = (largeur-zoom*N)/2;
		int coiny = (hauteur-zoom*N)/2;
       int a = (e.getX() - coinx)/zoom;
       int b = N-((e.getY() - coiny)/zoom + 1);
       if ( a >= 0 & a < N & b >= 0 & b < N){
       labelpointCoordonneesx.setText("i = " + a + " ");
       labelpointCoordonneesy.setText("j = " + b + " ");
       //labelpointValeur.setText("Valeur = " + tableau[a][b]);
       //println(image.getWidth()); /
       }*/
    }

    void saySomething(String eventDescription, MouseEvent e) {
        //textArea.append(eventDescription + " detected on " + e.getComponent().getClass().getName() + "." + newline);
    }
}

class ClavierListener implements KeyListener{
    	
		public void keyPressed(KeyEvent event) {
			// println("Code touche pressée : " + event.getKeyCode() + " - caractère touche pressée : " + event.getKeyChar());
			if (event.getKeyCode() == 38 && event.getSource() == jtfNombrea){
			image.effaceFiltre();
     		image.fonctionPartiel.setabc(Integer.parseInt(jtfNombrea.getText()) + 1, Integer.parseInt(jtfNombreb.getText()), Integer.parseInt(jtfNombrec.getText()));
     		jtfNombrea.setText(Integer.toString(Integer.parseInt(jtfNombrea.getText()) + 1));
     		image.filtre();
			}
			if (event.getKeyCode() == 40 && event.getSource() == jtfNombrea){
			image.effaceFiltre();
     		image.fonctionPartiel.setabc(Integer.parseInt(jtfNombrea.getText()) - 1, Integer.parseInt(jtfNombreb.getText()), Integer.parseInt(jtfNombrec.getText()));
     		jtfNombrea.setText(Integer.toString(Integer.parseInt(jtfNombrea.getText()) - 1));
     		image.filtre();
			}
			if (event.getKeyCode() == 38 && event.getSource() == jtfNombreb){
			image.effaceFiltre();
     		image.fonctionPartiel.setabc(Integer.parseInt(jtfNombrea.getText()), Integer.parseInt(jtfNombreb.getText()) + 1, Integer.parseInt(jtfNombrec.getText()));
     		jtfNombreb.setText(Integer.toString(Integer.parseInt(jtfNombreb.getText()) + 1));
     		image.filtre();
			}
			if (event.getKeyCode() == 40 && event.getSource() == jtfNombreb){
			image.effaceFiltre();
     		image.fonctionPartiel.setabc(Integer.parseInt(jtfNombrea.getText()), Integer.parseInt(jtfNombreb.getText()) - 1, Integer.parseInt(jtfNombrec.getText()));
     		jtfNombreb.setText(Integer.toString(Integer.parseInt(jtfNombreb.getText()) - 1));
     		image.filtre();
			}
			if (event.getKeyCode() == 38 && event.getSource() == jtfNombrec){
			image.effaceFiltre();
     		image.fonctionPartiel.setabc(Integer.parseInt(jtfNombrea.getText()), Integer.parseInt(jtfNombreb.getText()), Integer.parseInt(jtfNombrec.getText()) + 1);
     		jtfNombrec.setText(Integer.toString(Integer.parseInt(jtfNombrec.getText()) + 1));
     		image.filtre();
			}
			if (event.getKeyCode() == 40 && event.getSource() == jtfNombrec){
			image.effaceFiltre();
     		image.fonctionPartiel.setabc(Integer.parseInt(jtfNombrea.getText()), Integer.parseInt(jtfNombreb.getText()), Integer.parseInt(jtfNombrec.getText()) - 1);
     		jtfNombrec.setText(Integer.toString(Integer.parseInt(jtfNombrec.getText()) - 1));
     		image.filtre();
			}
		}

		public void keyReleased(KeyEvent event) {
			//println("Code touche relâchée : " + event.getKeyCode() + " - caractère touche relâchée : " + event.getKeyChar());			
						
		}

		public void keyTyped(KeyEvent event) {
			//println("Code touche tapée : " + event.getKeyCode() + " - caractère touche tapée : " + event.getKeyChar());
		}    	
    }    	

public class Image extends IconOutput{
	String nom;
	int typeFonction;
	int typeFonctionPartiel;
	int typePropriete;
	int dimensionx;
	int dimensiony;
	int centrex;
	int centrey;
	int frequence;
	int debutIntervalle;
	int finIntervalle;
	Fonction fonction;
	Fonction fonctionPartiel;
	Color couleurDefaut;
	Color couleurPropriete;
	Color couleurProprietePartiel;
	Color couleurNonProprietePartiel;
	Color couleurCentre;
	public Image(){
		
	}
	public void setImage(int dimx, int dimy, boolean zoom, int type1, int type2, int type3, int intervallea, int intervalleb){
		dimensionx = dimx;
		dimensiony = dimy;
		debutIntervalle = intervallea;
		finIntervalle = intervalleb;
		reset(dimensionx,dimensiony, zoom);
		nom = "Chemin\\image.png";
		typeFonction = type1;
		typePropriete = type2;
		typeFonctionPartiel = type3;
		frequence = 0;
		fonction = new Fonction();
		fonctionPartiel = new Fonction();
		couleurDefaut = new Color(255, 255, 255);
		couleurPropriete = new Color(0, 0, 0);
		couleurProprietePartiel = new Color(255, 0, 0);
		couleurNonProprietePartiel = new Color(0, 255, 0);
		couleurCentre = new Color(0, 0, 255);
	}
		public void setImage(int dimx, int dimy){
		dimensionx = dimx;
		dimensiony = dimy;
		setSize(dimy,dimx);			
		}
	public void setNom(String nomfichier){
		nom = nomfichier;
	}
	public void setIntervalle(int intervallea, int intervalleb){
		debutIntervalle = intervallea;
		finIntervalle = intervalleb;
	}
	public void setTypeFonction(int n){
		typeFonction = n;
	}
	public void setTypeFonctionPartiel(int n){
		typeFonctionPartiel = n;
	}
	public void setTypePropriete(int n){
		typePropriete = n;
	}
	public void setCentre(int x, int y){
		centrex = x;
		centrey = y;
	}

	public double frequence(){
		int nombreTotal;
		int nombreVerifiantPropriete;
		nombreTotal = dimensionx * dimensiony;
		nombreVerifiantPropriete = 0;
		for (int i=0; i < dimensionx; i++){
			for (int j=0; j < dimensiony; j++){
					if (getPixelColor(i, j) == couleurPropriete){
						nombreVerifiantPropriete = nombreVerifiantPropriete + 1;
					}
			}
		}
		return (double) nombreVerifiantPropriete/nombreTotal;
	}
	public void creeSpirale(){
		//set(250, 250, new Color(255, 0, 0));
		//set(250, 250, couleurPropriete);
		//println(dimensionx);
		//println(dimensiony);
		int nombre;
		int coinx = coinBasGauche(centrex, centrey, dimensionx, dimensiony)[0];
		int coiny = coinBasGauche(centrex, centrey, dimensionx, dimensiony)[1];
		//println(coinx);
		//println(coiny);
		int dimMoitiex = dimMoitie(dimensionx, dimensiony)[0];
		int dimMoitiey = dimMoitie(dimensionx, dimensiony)[1];
		//println(dimMoitiex);
		//println(dimMoitiey);
//		set( dimMoitiex, dimMoitiey, couleurCentre);
		for (int i=0; i < dimensionx; i++){
			for (int j=0; j < dimensiony; j++){
				int coordonneex = coinx + i;
				int coordonneey = coiny + j;
				nombre = fonction.fonctionCalcule(typeFonction, coordonneesValeur(coordonneex, coordonneey));
				//println(nombre);
//				nombre = coordonneesValeur(i - centrex,j - centrey);
				if (proprieteNombre(typePropriete, nombre)){
					set( i, dimensiony -1  - j , couleurPropriete);
				}else{
					set( i, dimensiony -1  - j , couleurDefaut);
				}
			}
		}
				//set(dimMoitiex, dimensiony -1  - dimMoitiey, couleurCentre);
	}

	public void filtre(){
		int[] ij = new int[2];
		int nombre, i, j;
		int dimMoitiex = dimMoitie(dimensionx, dimensiony)[0];
		int dimMoitiey = dimMoitie(dimensionx, dimensiony)[1];
		for (int k = debutIntervalle; k < finIntervalle; k++){
			ij = valeurCoordonnees(fonctionPartiel.fonctionCalcule(typeFonctionPartiel, k));
			nombre = coordonneesValeur(ij[0], ij[1]);
			nombre = image.fonction.fonctionCalcule(typeFonction, nombre);
			//nombre = image.fonctionPartiel.fonctionCalcule(typeFonction, nombre);
			i = ij[0] + dimMoitiex - centrex;
			j = ij[1] + dimMoitiey - centrey;
			if ( 0 <= i && i < dimensionx && 0 <= j && j < dimensiony){
				//println(ij[0]);
				//println(ij[1]);
			if (proprieteNombre(typePropriete, nombre)){
				//println(nombre);
				set( i, dimensiony -1  - j , couleurProprietePartiel);
			}else{
				set( i, dimensiony -1  - j , couleurNonProprietePartiel);
			}
			}
		}
	}

	public void effaceFiltre(){
		for (int i = 0; i < dimensionx; i++) {
			for (int j = 0; j < dimensionx; j++){
				if (getPixelColor(i,j) == couleurProprietePartiel){
					set(i, j, couleurPropriete);
				}
				if (getPixelColor(i,j) == couleurNonProprietePartiel){
					set(i, j, new Color(255, 255, 255));
				}				
			}
		}
	}
	

	public boolean save() {
	try {
	  ImageUtils.saveImage(nom, getImage());
	  return true;
	} catch(Exception e) {
	  System.out.println("Erreur à la sauvegarde de l'image dans '"+nom+"' : "+e);
	  return false;
	}
  }
}

public class Fonction{
	int a;
	int b;
	int c;
	public Fonction(int coeffa, int coeffb, int coeffc){
		a = coeffa;
		b = coeffb;
		c = coeffc;
	}
	public Fonction(){
	}	
	public void setabc(int coeffa, int coeffb, int coeffc){
		a = coeffa;
		b = coeffb;
		c = coeffc;		
	}
	public int fonctionCalcule(int typeFonction, int n){
		int valeurRetour = 0;
		if (typeFonction == 1){
			valeurRetour = f(n, a, b, c);
		}
		if (typeFonction == 2){
			valeurRetour = suiteM(f(n, a, b, c));
		}
		if (typeFonction == 3){
			valeurRetour = suiteF(f(n, a, b, c));
		}
		return valeurRetour;
	}
}

	public int[] coinBasGauche(int centrex, int centrey, int dimensionx, int dimensiony){
		int[] coin = new int [2];
		if (dimensionx % 2 == 0){
		coin[0] = centrex - ((int) dimensionx/2 -1);
		}else{
		coin[0] = centrex - (int) dimensionx/2;
		}
		if (dimensiony % 2 == 0){
		coin[1] = centrey - ((int) dimensiony/2 -1);
		}else{
		coin[1] = centrey - (int) dimensiony/2;
		}
		return coin;
	}

	public int[] dimMoitie(int dimensionx, int dimensiony){
		int[] dim = new int [2];
		if (dimensionx % 2 == 0){
		dim[0] = (int) dimensionx/2 -1;
		}else{
		dim[0] = (int) dimensionx/2;
		}
		if (dimensiony % 2 == 0){
		dim[1] = (int) dimensiony/2 -1;
		}else{
		dim[1] = (int) dimensiony/2;
		}
		return dim;
	}


boolean proprieteNombre(int typePropriete, int n){
		boolean propriete = false;
		if (typePropriete == 1){
			propriete = estPremier(n);
		}
		if (typePropriete == 2){
			propriete = !(n == 0);
		}
		return propriete;
	}	


boolean estPremier(int n) {
   if (n <= 3) return  n == 2 || n == 3;
   if (n % 2 == 0) return  false;
   for (int i = 3; i * i <= n; i += 2) {
      if (n % i == 0) {
         return  false;
      }
   }
   return  true;
}

int suiteF(int n){
	int k;
  if (n == 0)
     return 0;
  if (n == 1)
     return 1;     
  else{
  	if (n % 2 == 0){
  		return suiteF((int) n/2);
  	}else{
  		return suiteF(n - 1) + suiteF(n + 1);
  	}  	
  }
}

int suiteM (int n) {
	int k;
  if (n == 0)
     return 0;
  else{
  	k = (int) Math.floor((Math.log(n)) / (Math.log(2)) + 1);
  	if (k % 2 == 0){
  		return suiteM((int) pow(2,k)-1-n);
  	}
  	else{
  		return 1 - suiteM((int) pow(2,k)-1-n);
  	}
  }
}

int f (int n, int a, int b, int c){
	return a*n*n + b*n + c;
}

int coordonneesValeur(int i, int j) {
   int valeur = 0;
   if (i > 0 && - i < j && j <= i) {
      valeur = 4 * i * i - 3 * i + j;
   }
   if (j < 0 && j < i && i <= - j) {
      valeur = 4 * j * j - 3 * j + i;
   }
   if (i < 0 && i <= j && j < - i) {
      valeur = 4 * i * i - i - j;
   }
   if (j > 0 && - j <= i && i < j) {
      valeur = 4 * j * j - j - i;
   }
   return  valeur;
}

int[] valeurCoordonnees(int valeur) {
   int[]ij = new int[2];
   int i = 0;
   int j = 0;
   int m = (int) Math.sqrt(valeur);
   int n;
   int difference = valeur - m * m;
   if (valeur > 0) {
      if (m % 2 == 0) {
         n = (int) m / 2;
         if (0 <= difference && difference < 2 * n) {
            i = - n;
            j = n - difference;
         }
         if (2 * n <= difference && difference < 4 * n + 1) {
            i = difference - 3 * n;
            j = - n;
         }
      } else {
         n = (int) (m - 1) / 2;
         if (0 <= difference && difference < 2 * n + 1) {
            i = n + 1;
            j = difference - n;
         }
         if (2 * n + 1 <= difference && difference < 4 * n + 3) {
            i = 3 * n + 2 - difference;
            j = n + 1;
         }
      }
   }
      ij[0] = i;
      ij[1] = j;
   return  ij;
}

void main() {
	Spirale spirale = new Spirale();
}

